# device: $torch.device(f'cuda:{dist.get_rank()}')
network:
  _target_: torch.nn.parallel.DistributedDataParallel
  module: $@network_def.to(@device)
  device_ids: ['@device']
  find_unused_parameters: true

tsampler:
  _target_: DistributedSampler
  dataset: '@train_ds'
  even_divisible: true
  shuffle: true
train_dataloader#sampler: '@tsampler'
train_dataloader#shuffle: false

vsampler:
  _target_: DistributedSampler
  dataset: '@eval_ds'
  even_divisible: false
  shuffle: false
eval_dataloader#sampler: '@vsampler'

# trainer#train_handlers: '$@handlers[: 2 if dist.get_rank() > 0 else None]'
# evaluator#val_handlers: '$None if @is_not_rank0 else @val_handlers'

# trainer#train_handlers: '$@handlers[1 if @is_not_rank0 else 0:]'

training: 
- $import torch.distributed as dist
- $dist.init_process_group(backend='nccl')
- $print(@device)
- $torch.cuda.set_device(@device)
- $monai.utils.set_determinism(seed=123),
# - $print(@network)
- $@trainer.run()
- $dist.destroy_process_group()